<template>
	<view class="read" :style="{'background-color': skinColor.readBackColor, filter: 'brightness(' + light + '%)'}">
		<view id="readTop" class="read-top" :style="{color: skinColor.readTextColor, 'background-color': skinColor.readBackColor}">
			<gap-bar></gap-bar>
			<view class="read-top-line">
				<text class="read-top-text" style="width: 80%;">{{bookInfo.name}}</text>
				<text class="read-top-text">{{progress}}%</text>
			</view>
		</view>
		
		<!-- 文本内容区域 -->
		<list @scroll="scroll">
			<cell>
				<text
				:style="{
				'font-size': fontSize + 'px',
				'line-height': (fontSize + 10) + 'px',
				color: skinColor.readTextColor}">{{nowContent}}</text>
				<view ref="test" class="test" @appear="appear" @disappear="disappear" v-if="isEnded"></view>
			</cell>
		</list>
		
		<!-- 触摸区域 -->
		<!-- <view class="touchBoard">
			<view class="touch-box touch-left" v-if="scrollMode == 'paging'">
				<view class="touch-item touch-prev"></view>
			</view>
			<view class="touch-box touch-center">
				<view class="touch-item" @tap="$refs.readSetting.show()"></view>
			</view>
			<view class="touch-box touch-right" v-if="scrollMode == 'paging'">
				<view class="touch-item touch-next"></view>
			</view>
		</view> -->
		
		<!-- 阅读设置 -->
		<!-- <read-setting :markTitle="markTitle" :catalog="catalog" :path="path" ref="readSetting"></read-setting> -->
	</view>
</template>

<script>
	import { mapGetters, mapMutations } from 'vuex'
	import { skinMixin } from '@/common/mixin/index.js'
	import { indexOf } from '@/common/js/util.js'
	import ReadSetting from './setting.vue'
	import NavBar from '@/components/nav-bar/nav-bar.nvue'
	import GapBar from '@/components/nav-bar/nav-bar.nvue'
	export default {
		mixins: [skinMixin],
		data () {
			return {
				bookContent: '',
				nowContent: '',
				isEnded: false,
				isFirst: true,
				catalog: [],
				markTitle: ''
			}
		},
		computed: {
			...mapGetters(['readMode', 'bookList']),
			//书籍信息
			bookInfo () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				let index =  page.options.index;
				return this.bookList[index];
			},
			//文件路径
			path () {
				return this.bookInfo.path;
			},
			//滚动方式
			scrollMode () {
				return this.readMode.scroll;
			},
			fontSize () {
				return this.readMode.fontSize;
			},
			domProp () {
				return {
					fontSize: this.readMode.fontSize,
					scrollMode: this.readMode.scroll,
					record: this.bookInfo.record,
					path: this.path
				};
			},
			progress () {
				if ( this.bookInfo.record == 0 ) {
					return 0
				} else {
					return parseFloat(((this.bookInfo.record / this.bookInfo.length) * 100).toFixed(2))
				}
			},
			light () {
				return (100 - ((1 - this.readMode.light) * 50)).toFixed(2);
			}
		},
		created () {
			this.getContent();
		},
		methods: {
			getContent () {
				plus.io.resolveLocalFileSystemURL('file://' + this.path, ( entry ) => {
					entry.file( ( file ) => {
						let reader = new plus.io.FileReader();
						reader.onloadend = ( e ) => {
							plus.nativeUI.closeWaiting();
							this.bookContent = e.target.result;
							this.setNowPage();
						};
						reader.readAsText( file, 'gb2312' );
					}, ( fail ) => {
						console.log("Request file system failed: " + fail.message);
					});
				}, ( fail ) => {
					console.log( "Request file system failed: " + fail.message );
				});
			},
			setNowPage () {
				this.nowContent = this.bookContent.substr(0, 800);
				this.$nextTick(() => {
					this.isFirst = false;
					let len = this.nowContent.length;
					for ( let i = 0; i < len; i++ ) {
						this.nowContent = this.nowContent.substr(0, this.nowContent.length-1);
						console.log(this.$refs.test);
						if ( this.isEnded ) {
							break;
						}
					}
				})
			},
			disappear () {
				this.isEnded = false;
			},
			appear () {
				this.isEnded = true;
			}
		},
		components: {
			GapBar,
			NavBar,
			ReadSetting
		}
	}
</script>

<style scoped>
	.read {
		flex: 1;
		padding: 0 20rpx;
	}
	.read-top {
		width: 710rpx;
		margin-left: 20rpx;
	}
	.read-top-line {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}
	.read-top-text {
		font-size: 22rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.touchBoard {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		flex-direction: row;
		justify-content: center;
	}
	.touch-box  {
		flex-direction: row;
		align-items: center;
		border-width: 1px;
		border-style: solid;
		border-color: #4CD964;
	}
	.touch-left, .touch-right {
		flex: 1;
	}
	.touch-center {
		width: 225rpx;
	}
	.touch-item {
		flex: 1;
		height: 200rpx;
	}
	.touch-prev, .touch-next {
	}
	.test {
		flex: 1;
		height: 30rpx;
		background-color: #000000;
	}
</style>
