<template>
	<view class="read" :style="{'background-color': skinColor.readBackColor}">
		<nav-bar :bgColor="skinColor.readBackColor" :title="bookInfo.name" :titleColor="skinColor.readTextColor" :backColor="skinColor.readTextColor">
			<view class="nav-right" slot="right">
				<!-- <text class="nav-right-text" :style="{'color': skinColor.textColor}">{{pageIndex}}/{{totalPage}}</text> -->
				<text class="nav-right-text" :style="{'color': skinColor.textColor}">{{progress}}%</text>
			</view>
		</nav-bar>
		<view class="list-view" :class="{'opacClass': listShow}" ref="listView">
			<scroll-view
			:show-scrollbar="scrollMode == 'upDown'"
			class="content"
			:scroll-y="scrollMode == 'upDown'"
			:scroll-top="scrollTop"
			:style="{height: viewHeight + 'px'}"
			@scroll="scroll">
				<text
				ref="text"
				selectable
				:style="{
				'font-size': fontSize + 'px',
				'line-height': (fontSize + 15) + 'px',
				color: skinColor.readTextColor}"
				>{{bookContent}}</text>
			</scroll-view>
			<view class="touchBoard">
				<view class="touch-box touch-left" v-if="scrollMode == 'leftRight'">
					<view class="touch-item" @tap="prevPage"></view>
				</view>
				<view class="touch-box touch-center">
					<view class="touch-item" @tap="$refs.readSetting.show()"></view>
				</view>
				<view class="touch-box touch-right" v-if="scrollMode == 'leftRight'">
					<view class="touch-item" @tap="nextPage"></view>
				</view>
			</view>
		</view>
		<read-setting :path="path" :totalPage="totalPage" :progress="progress" ref="readSetting"></read-setting>
		<!-- 隐藏的一行文本用于获取一行字的真实高度 -->
		<text
		ref="lineHeight"
		class="lineHeight"
		:style="{
		'font-size': fontSize + 'px',
		'line-height': (fontSize + 15) + 'px',}">一</text>
	</view>
</template>

<script>
	import { mapGetters, mapMutations } from 'vuex'
	import { skinMixin } from '@/common/mixin/index.js'
	import { indexOf } from '@/common/js/util.js'
	import ReadSetting from './setting.nvue'
	const dom = weex.requireModule('dom');
	const pageSize = 1000;
	export default {
		mixins: [skinMixin],
		data () {
			return {
				//是否显示文本容器
				listShow: false,
				//小说内容
				bookContent: '',
				//文本容器实际高度
				listHeight: 0,
				//字符实际行高
				lineHeight: 0,
				//文本内容实际高度
				textHeight: 0,
				//偏移值
				scrollTop: 0,
				//实时滚动值
				scrollTopCurrent: 0
			}
		},
		computed: {
			...mapGetters(['readMode', 'bookList']),
			path () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				return page.options.path;
			},
			//书籍信息
			bookInfo () {
				return this.bookList[indexOf(this.bookList, this.path, 'path')];
			},
			//页数
			pageIndex () {
				return this.bookInfo.pageIndex
			},
			//字体大小
			fontSize () {
				return this.readMode.fontSize;
			},
			//滚动方式
			scrollMode () {
				return this.readMode.scroll;
			},
			//行数
			textLine () {
				return parseInt(this.listHeight / this.lineHeight);
			},
			//当前页面的字符应该占的高度
			viewHeight () {
				return this.textLine * this.lineHeight;
			},
			//总页数
			totalPage () {
				return this.textHeight % this.viewHeight > 0 ? parseInt(this.textHeight / this.viewHeight) + 1 : parseInt(this.textHeight / this.viewHeight);
			},
			//阅读进度
			progress () {
				return this.pageIndex > 1 ? (((this.pageIndex) / this.totalPage) * 100).toFixed(2) : '0.00';
			}
		},
		created () {
			this.getContent();
		},
		methods: {
			...mapMutations(['updateBookProgress', 'updateBookPage']),
			// getContent () {
			// 	let ReadTxt = plus.android.importClass('com.itstudy.io.GetText');
			// 	let readTxt = new ReadTxt();
			// 	this.bookContent = readTxt.getTextFromText(plus.io.convertLocalFileSystemURL(this.path));
			// 	this.$nextTick(async () => {
			// 		this.listHeight = await this.getDomHeight('listView');
			// 		this.lineHeight = await this.getDomHeight('lineHeight');
			// 		this.textHeight = await this.getDomHeight('text');
			// 		//第一次加载内容时初始化页数，偏移值
			// 		this.pageIndex = this.bookInfo.pageIndex;
			// 		this.scrollTop = (this.pageIndex - 1) * this.viewHeight;
			// 		//页面初始化完成后,显示内容
			// 		setTimeout(() => {
			// 			this.listShow = true;
			// 		}, 50)
			// 	})
			// },
			getContent () {
				plus.io.resolveLocalFileSystemURL('file://' + this.path, ( entry ) => {
					entry.file( ( file ) => {
						let slice = file.slice(this.pageIndex, this.pageIndex + pageSize);
						let reader = new plus.io.FileReader();
						reader.onloadend = ( e ) => {
							this.bookContent = e.target.result;
							this.$nextTick(async () => {
								this.listHeight = await this.getDomHeight('listView');
								this.lineHeight = await this.getDomHeight('lineHeight');
								this.textHeight = await this.getDomHeight('text');
								//第一次加载内容时初始化页数，偏移值
								this.pageIndex = this.bookInfo.pageIndex;
								this.scrollTop = (this.pageIndex - 1) * this.viewHeight;
								setTimeout(() => {
									this.listShow = true;
								}, 50)
							})
						};
						reader.readAsText( slice, 'utf-8' );
					}, ( fail ) => {
						console.log("Request file system failed: " + fail.message);
					});
				}, ( fail ) => {
					console.log( "Request file system failed: " + fail.message );
				});
			},
			//获取元素高度
			getDomHeight (query) {
				return new Promise((resolve, reject) => {
					dom.getComponentRect(this.$refs[query], (res) => {
						resolve(res.size.height);
					})
				})
			},
			prevPage () {
				if ( this.pageIndex == 1 ) {
					uni.showToast({
						icon: 'none',
						title: '已经是第一页了'
					})
					return;
				}
				let book = {
					path: this.path,
					page: this.pageIndex - 1
				}
				this.updateBookPage(book)
			},
			nextPage () {
				if ( this.pageIndex >= this.totalPage ) {
					uni.showToast({
						icon: 'none',
						title: '已经是最后一页了'
					})
					return;
				}
				let book = {
					path: this.path,
					page: this.pageIndex + 1
				}
				this.updateBookPage(book);
			},
			scroll (e) {
				if ( this.scrollMode != 'upDown' ) {
					return;
				}
				this.scrollTopCurrent = e.detail.scrollTop;
			}
		},
		components: {
			ReadSetting
		},
		watch: {
			async fontSize (val) {
				//字体大小更改，重新获取字符行高和文本内容实际高度
				this.lineHeight = await this.getDomHeight('lineHeight');
				this.textHeight = await this.getDomHeight('text');
			},
			scrollTopCurrent (val) {
				//文本偏移距离更改,如果当前翻页为上下滚动,根据偏移距离计算页数
				if ( this.scrollMode == 'upDown' ) {
					let book = {
						path: this.path,
						page: val % this.viewHeight > 0 ? parseInt(val/ this.viewHeight) + 1 : parseInt(val/ this.viewHeight)
					}
					this.updateBookPage(book)
				}
			},
			pageIndex (val) {
				//页数更改，更新书籍阅读进度
				let book = {
					path: this.path,
					progress: this.progress
				}
				this.updateBookProgress(book);
				//页数更改,如果当前翻页为左右翻页,根据页数计算偏移距离
				if ( this.scrollMode == 'leftRight' ) {
					this.scrollTop = (val - 1) * this.viewHeight;
				}
			},
			scrollMode (val) {
				//翻页方式更改，如果改为左右翻页则根据页数计算偏移距离
				if ( val == 'leftRight' ) {
					this.scrollTop = (this.pageIndex - 1) * this.viewHeight;
				}
			}
		}
	}
</script>

<style scoped>
	.nav-right {
		flex: 1;
		align-items: flex-end;
		padding-right: 20px;
	}
	.nav-right-text {
		font-size: 14px;
	}
	.list-view {
		flex: 1;
		justify-content: center;
		opacity: 0;
	}
	.opacClass {
		opacity: 1;
	}
	.lineHeight {
		position: absolute;
		opacity: 0;
	}
	.content {
		padding: 0 20px;
	}
	.touchBoard {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		flex-direction: row;
		justify-content: center;
	}
	.touch-box  {
		justify-content: center;
	}
	.touch-left {
		flex: 1;
	}
	.touch-right {
		flex: 1;
	}
	.touch-center {
		width: 300rpx;
	}
	.touch-item {
		height: 300rpx;
	}
</style>
