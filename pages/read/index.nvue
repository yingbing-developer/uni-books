<template>
	<view class="read" :style="{'background-color': skinColor.readBackColor}">
		<nav-bar :bgColor="skinColor.readBackColor" title="第一章 杉杉苑" :titleColor="skinColor.readTextColor" :backColor="skinColor.readTextColor">
		</nav-bar>
		<view class="list-view" ref="listView">
			<view class="content">
				<text
				ref="text"
				class="content-text"
				:style="{
				lines: textLine * pageIndex,
				transform: 'translateY(-' + lateY + 'px)',
				'font-size': fontSize + 'px',
				'line-height': lineHeight + 'px',
				color: skinColor.readTextColor}"
				>{{bookContent}}</text>
			</view>
			<view class="touchBoard">
				<view class="touch-box touch-left">
					<view class="touch-item" @tap="prevPage"></view>
				</view>
				<view class="touch-box touch-center">
					<view class="touch-item" @tap="$refs.readSetting.show()"></view>
				</view>
				<view class="touch-box touch-right">
					<view class="touch-item" @tap="nextPage"></view>
				</view>
			</view>
		</view>
		<read-setting ref="readSetting"></read-setting>
	</view>
</template>

<script>
	import { mapGetters } from 'vuex'
	import { skinMixin } from '@/common/mixin/index.js'
	import ReadSetting from './setting.nvue'
	const dom = weex.requireModule('dom');
	const pageSize = 1000;
	export default {
		mixins: [skinMixin],
		data () {
			return {
				bookContent: '',
				//当前页面索引
				pageIndex: 1,
				listHeight: 0,
				textHeight: 0
			}
		},
		computed: {
			...mapGetters(['readMode']),
			path () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				return page.options.path;
			},
			fontSize () {
				return this.readMode.fontSize;
			},
			//行高
			lineHeight () {
				return this.fontSize + 15;
			},
			//行数
			textLine () {
				return parseInt(this.listHeight / this.lineHeight);
			},
			//偏移值
			lateY () {
				return this.textHeight * (this.pageIndex - 1);
			}
		},
		created () {
			this.getContent();
		},
		mounted () {
			setTimeout(() => {
				this.getListViewHeight();
				this.getContent();
			}, 20)
		},
		methods: {
			// getContent () {
			// 	let ReadTxt = plus.android.importClass('com.itstudy.io.GetText');
			// 	let readTxt = new ReadTxt();
			// 	this.bookContent = readTxt.getTextFromText(plus.io.convertLocalFileSystemURL(this.path));
			// },
			getContent () {
				plus.io.resolveLocalFileSystemURL('file://' + this.path, ( entry ) => {
					entry.file( ( file ) => {
						let slice = file.slice(this.pageIndex, this.pageIndex + pageSize);
						let reader = new plus.io.FileReader();
						reader.onloadend = ( e ) => {
							this.bookContent = e.target.result;
							this.getTextHeight();
						};
						reader.readAsText( slice, 'utf-8' );
					}, ( fail ) => {
						console.log("Request file system failed: " + fail.message);
					});
				}, ( fail ) => {
					console.log( "Request file system failed: " + fail.message );
				});
			},
			//获取容器高度
			getListViewHeight () {
				dom.getComponentRect(this.$refs.listView, (res) => {
					this.listHeight = res.size.height;
				})
			},
			//获取文本显示出来的高度
			getTextHeight () {
				dom.getComponentRect(this.$refs.text, (res) => {
					this.textHeight = res.size.height / this.pageIndex;
				})
			},
			prevPage () {
				if ( this.pageIndex == 1 ) {
					uni.showToast({
						icon: 'none',
						title: '已经是第一页了'
					})
					return;
				}
				this.pageIndex--;
			},
			nextPage () {
				this.pageIndex++;
			}
		},
		components: {
			ReadSetting
		},
		watch: {
			fontSize (val) {
				this.getTextHeight();
			}
		}
	}
</script>

<style scoped>
	.nav-center {
		flex: 1;
		align-items: center;
		justify-content: center;
	}
	.list-view {
		flex: 1;
	}
	.content {
		padding: 0 20px;
		flex: 1;
	}
	.content-text {
		text-overflow: unset;
	}
	.webview {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.touchBoard {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		flex-direction: row;
	}
	.touch-box  {
		justify-content: center;
	}
	.touch-left {
		flex: 1;
	}
	.touch-right {
		flex: 1;
	}
	.touch-center {
		width: 300rpx;
	}
	.touch-item {
		height: 400rpx;
	}
</style>
