<template>
	<view class="search" :style="{'background-color': skinColor.bgColor}">
		<nav-bar title="添加书籍" :bgColor="skinColor.navColor" :titleColor="skinColor.iconColor">
			<!-- <view slot="right" @tap="showFilterBox">
				<c-icon name="filter" size="37.5" :color="skinColor.iconColor"></c-icon>
			</view> -->
			<view class="nav-right" slot="right">
				<text class="nav-text" :style="{'color': skinColor.iconColor}" v-if="checkes.length > 0">选中({{checkes.length}}/{{fileLength}})</text>
				<view @tap="$refs.bubble.show()">
					<c-icon name="more" size="37.5" :color="skinColor.iconColor"></c-icon>
				</view>
			</view>
		</nav-bar>
		<c-search @confirm="setNameFilter"></c-search>
		 <list>
		    <!-- 注意事项: 不能使用 index 作为 key 的唯一标识 -->
			<!-- 返回项 -->
			<cell>
				<view @tap="backParent()" class="list" :style="{'border-bottom-color': skinColor.gapColor}">
					<view class="list-icon">
						<c-icon name="folder" size="75" color="#FFCA28"></c-icon>
					</view>
					<view class="list-right-back">
						<text class="list-title" :style="{'color': skinColor.titleColor}">..</text>
					</view>
				</view>
			</cell>
			<!-- 文件列表 -->
		    <cell v-for="(item, index) in list" :key="item.name">
				<view v-if="item.name.indexOf(nameFilter) > -1" @tap="clickFolder(item.path)" @longpress="showAction(index)" class="list" :style="{'border-bottom-color': skinColor.gapColor, 'background-color': checkes.indexOf(item.path) > -1 ? skinColor.menuActiveBgColor : ''}">
					<view class="list-icon" @tap.stop="check(index)">
						<c-icon name="folder" size="75" color="#FFCA28" v-if="item.type == 'folder'"></c-icon>
						<c-icon name="txt" size="60" color="#FFCA28" v-else></c-icon>
					</view>
					<view class="list-right">
						<view class="lr-top">
							<text class="list-title" :style="{'color': skinColor.titleColor}">{{item.name}}</text>
							<text v-if="isLead(item.path) > -1" class="list-text" :style="{'color': skinColor.textColor}">已导入</text>
						</view>
						<view class="lr-bottom">
							<text class="list-text" :style="{'color': skinColor.textColor}">{{item.time}}</text>
							<text class="list-text" :style="{'color': skinColor.textColor}" v-if="item.type != 'folder'">{{item.size}}</text>
						</view>
					</view>
				</view>
		    </cell>
		  </list>
		  <view class="btn-box" v-if="checkes.length > 0" :style="{'border-top-color': skinColor.gapColor}">
			  <view class="btn" @tap="leadBook">
				  <text class="btn-text">导入书籍</text>
			  </view>
		  </view>
		  <!-- 操作列表 -->
		  <action-sheet ref="action" :list="actions" @select="selectItem"></action-sheet>
		  <!-- 气泡弹窗 -->
		  <bubble ref="bubble">
				<block v-if="fileLength > 0">
					<view @tap="selectAll" v-if="checkes.length < fileLength">
						<bubble-item title="全选"></bubble-item>
					</view>
					<view @tap="cancelAll" v-if="checkes.length == fileLength">
						<bubble-item title="取消全选"></bubble-item>
					</view>
				</block>
				<view @tap="deleteFiles" v-if="checkes.length > 0">
					<bubble-item title="删除文件"></bubble-item>
				</view>
				<view @tap="backRoot">
					<bubble-item title="根目录"></bubble-item>
				</view>
		  </bubble>
	</view>
</template>

<script>
	import { skinMixin } from '@/common/mixin/index.js'
	import CIcon from '@/components/c-icon/c-icon.nvue'
	import CSearch from '@/components/search/search.nvue'
	import ActionSheet from '@/components/action-sheet/action-sheet.nvue'
	import Bubble from '@/components/bubble/bubble.nvue'
	import BubbleItem from '@/components/bubble-item/bubble-item.nvue'
	import { dateFormat, suffix, indexOf } from '@/common/js/util.js'
	import { mapGetters, mapMutations } from 'vuex'
	const environment = plus.android.importClass("android.os.Environment");
	export default {
		mixins: [skinMixin],
		data () {
			return {
				list: [],
				checkes: [],
				fileLength: 0,
				types: ['txt'],
				//名称过滤
				nameFilter: '',
				//操作列表
				actions: [],
				//触发操作列表的下标
				actionIndex: ''
			}
		},
		computed: {
			...mapGetters(['bookList', 'pathHistory'])
		},
		created () {
			if( environment.getExternalStorageState() !== environment.MEDIA_MOUNTED ) {
				uni.showToast({
					title: '没有找到SD卡',
					icon: 'none'
				})
			} else {
				this.getFileSystem(this.pathHistory);
			}
		},
		methods: {
			...mapMutations(['addBooks', 'deleteBook', 'updatePath']),
			//全选文件
			selectAll () {
				this.checkes = [];
				for ( let i in this.list ) {
					if ( this.list[i].type != 'folder' ) {
						this.checkes.push(this.list[i].path)
					}
				}	
				this.$refs.bubble.hide();
			},
			//取消全选
			cancelAll () {
				this.checkes = [];
				this.$refs.bubble.hide();
			},
			//删除选择的文件
			deleteFiles () {
				if ( this.checkes.length <= 0 ) {
					return;
				}
				uni.showModal({
					title: '操作提示',
					content: '确认删除选择的文件?',
					success: (res) => {
						if ( res.confirm ) {
							for ( let i = 0; i < this.checkes.length; i++) {
								this.deleteFile(this.checkes[i]);
							}
						}
					}
				})
				this.$refs.bubble.hide();
			},
			//选择文件
			check (index) {
				//如果为文件夹则不能选择
				if ( this.list[index].type == 'folder') {
					return;
				}
				const path = this.list[index].path;
				let flag = this.checkes.indexOf(path);
				if ( flag > -1 ) {
					this.checkes.splice(flag, 1);
				} else {
					this.checkes.push(path);
				}
			},
			//导入文件
			leadBook () {
				if ( this.checkes.length <= 0 ) {
					uni.showToast({
						icon: 'none',
						title: '请选择文件'
					})
					return;
				}
				let books = [];
				let err = 0;
				for ( let i in this.checkes ) {
					//根据文件路径判断文件有没有被导入过
					let index = indexOf(this.list, this.checkes[i], 'name');
					if ( this.isLead(this.list[index].path) == -1 ) {
						books.push(this.list[index]);
					} else {
						err++;
					}
				}
				this.addBooks(books);
				if ( err == 0 ) {
					uni.showToast({
						title: '添加成功'
					})
				} else {
					uni.showToast({
						title: '有' + err + '个文件添加失败',
						icon: 'none'
					})
				}
				this.checkes = [];
			},
			//过滤名称
			setNameFilter (val) {
				this.nameFilter = val;
			},
			//展示操作列表
			showAction (index) {
				//文件夹不能触发操作列表
				if ( this.list[index].type == 'folder' ) {
					return;
				}
				this.actions = [];
				this.actionIndex = index;
				//已经导入的文件操作列表
				if ( this.isLead(this.list[index].path) > -1 ) {
					this.actions = [{
						title: '取消导入',
						value: 'pop'
					},{
						title: '删除',
						value: 'delete'
					}]
				} else {
					//未导入的文件的操作列表
					this.actions = [{
						title: '导入',
						value: 'push'
					},{
						title: '删除',
						value: 'delete'
					}]
				}
				this.$refs.action.show();
			},
			selectItem (val) {
				//用户选择导入操作
				if ( val == 'push' ) {
					//根据文件路径判断文件有没有被导入过
					if ( this.isLead(this.list[this.actionIndex].path) == -1 ) {
						let books = [];
						books.push(this.list[this.actionIndex]);
						this.addBooks(books);
						uni.showToast({
							title: '导入成功'
						})
					} else {
						uni.showToast({
							title: '这本书已经导入了',
							icon: 'none'
						})
					}
				}
				//选择取消导入
				if ( val == 'pop' ) {
					uni.showModal({
						title: '操作提示',
						content: '是否将选中书籍从导入列表删除？',
						success: (res) => {
							if ( res.confirm ) {
								this.deleteBook(this.list[this.actionIndex].path);
							}
						}
					})
				}
				//用户选择删除操作
				if ( val == 'delete' ) {
					uni.showModal({
						title: '操作提示',
						content: '确认删除文件吗?',
						success: (res) => {
							if ( res.confirm ) {
								this.deleteFile(this.list[this.actionIndex].path);
							}
						}
					})
				}
			},
			//删除文件
			deleteFile (path) {
				// 如果是已经导入的文件，删除导入记录
				let fd = new File(path);
				if (fd != null && fd.exists()){
					fd.delete();
					uni.showToast({
						title: '删除成功'
					});
					let flag = this.isLead(path);
					if ( flag > -1 ) {
						this.deleteBook(path);
					}
					//删除当前页面显示的数据
					let index = indexOf(this.list, path, 'path');
					this.list.splice(index, 1);
					//文件数量减1
					this.fileLength--;
					//如果被删除的文件被选择,则删除选择的列表数据
					let i = this.checkes.indexOf(path);
					if ( i > -1 ) {
						this.checkes.splice(i, 1);
					}
				}
			},
			//返回根目录
			backRoot () {
				this.getFileSystem();
				this.$refs.bubble.hide();
			},
			//返回上级目录
			backParent () {
				let fd = plus.android.newObject("java.io.File", this.pathHistory);
				if ( fd != null && plus.android.invoke(fd, 'exists') ) {
					let parent = plus.android.invoke(fd, 'getParent');
					if ( parent ) {
						this.getFileSystem(parent);
					} else {
						uni.showToast({
							icon: 'none',
							title: '没有上级文件夹了'
						})
					}
				} else {
					this.getFileSystem();
				}
			},
			//点击文件夹访问
			clickFolder (path) {
				//如果为文件不能访问
				let index = indexOf(this.list, path, 'path');
				if ( this.list[index].type != 'folder' ) {
					return;
				}
				this.getFileSystem(path);
			},
			//根据path路径获取文件系统对象,type为1表示访问为-1表示后退为0表示不记录
			getFileSystem (path) {
				let fd = path ? plus.android.newObject("java.io.File", path) : environment.getExternalStorageDirectory();
				let entry = fd != null && plus.android.invoke(fd, 'exists') ? fd : environment.getExternalStorageDirectory();
				if ( fd != null && plus.android.invoke(fd, 'exists') && path ) {
					this.updatePath(path);
				}
				let GetFileList = plus.android.importClass('com.itstudy.io.GetFileList');
				let getFile = new GetFileList();
				this.list = getFile.getFile(entry);
				// let list = plus.android.invoke(entry, "listFiles");
				// let len = list.length;
				// let file = [];
				// let folder = [];
				// let fileLength = 0;
				// for(let i=0; i<len; i++){
				//     // 过滤隐藏文件  
				//     if ( !plus.android.invoke(list[i],"isHidden") ){
				// 		let name = plus.android.invoke(list[i], 'getName');
				// 		if ( plus.android.invoke(list[i],"isDirectory") ){
				// 			folder.push({
				// 				name: name,
				// 				type: 'folder',
				// 				size: '0B',
				// 				time: dateFormat(plus.android.invoke(list[i],"lastModified")),
				// 				creatime: plus.android.invoke(list[i],"lastModified"),
				// 				path: plus.android.invoke(list[i],"getPath")
				// 			})
				// 		    // 文件夹
				// 		} else{
				// 			//是否是txt文件
				// 		    if ( plus.android.invoke(name, "endsWith", '.txt') ) {
				// 		    	file.push({
				// 					name: name,
				// 					type: suffix(name),
				// 					size: this.readFileSize(list[i]),
				// 					time: dateFormat(plus.android.invoke(list[i],"lastModified")),
				// 					creatime: plus.android.invoke(list[i],"lastModified"),
				// 					path: plus.android.invoke(list[i],"getPath")
				// 				})
				// 		    	//计算当前路径文件的数量
				// 		    	fileLength += 1;
				// 		    }
				// 		}  
				//     }
				// }
				// file.sort((a, b) => {
				// 	return b.creatime - a.creatime;
				// })
				// this.list = folder.concat(file);
				this.fileLength = fileLength;
				this.checkes = [];
			},
			readFileSize (file) {
			    let fileSize = plus.android.newObject("java.io.FileInputStream", file);
				let available = plus.android.invoke(fileSize, 'available');
				let size = available != 'null' ? available : 0;
				let fileSizeString;
				if(size == 0){
					fileSizeString = "0B";
				}else if(size < 1024){
					fileSizeString = size + "B";
				}else if(size < 1048576){
					fileSizeString = (size/1024).toFixed(2) + "KB";
				}else if (size < 1073741824){
					fileSizeString = (size/1048576).toFixed(2) + "MB";
				}else{
					fileSizeString = (size/1073741824).toFixed(2) + "GB";
				}
				return fileSizeString;
			},
			//根据文件路径判断当前文件是否已经导入,返回下标
			isLead (path) {
				return indexOf(this.bookList, path, 'path');
			}
		},
		onBackPress(event) {
			//操作列表打开时,先关闭操作列表
			if ( this.$refs.action.isShow ) {
				this.$refs.action.hide();
				return true;
			}
			//气泡菜单打开时,先关闭气泡菜单
			if ( this.$refs.bubble.isShow ) {
				this.$refs.bubble.hide();
				return true;
			}
			return false;
		},
		components: {
			CIcon,
			CSearch,
			ActionSheet,
			Bubble,
			BubbleItem
		}
	}
</script>

<style scoped>
	.nav-right {
		flex-direction: row;
		flex: 1;
		justify-content: flex-end;
		align-items: center;
	}
	.nav-text {
		font-size: 30rpx;
		margin-right: 22.5rpx;
	}
	.list {
		flex-direction: row;
		border-bottom-width: 1px;
		border-bottom-style: solid;
		padding-left: 15rpx;
		padding-right: 15rpx;
		padding-top: 15rpx;
		padding-bottom: 15rpx;
		height: 108rpx;
	}
	.list-icon {
		justify-content: center;
		align-items: center;
		margin-right: 15rpx;
		width: 75rpx;
	}
	.list-right {
		flex: 1;
		justify-content: space-between;
	}
	.list-right-back {
		flex: 1;
		justify-content: center;
	}
	.lr-top {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}
	.list-title {
		font-size: 30rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.lr-bottom {
		flex-direction: row;
		justify-content: space-between;
	}
	.list-text {
		font-size: 24rpx;
	}
	.btn-box {
		padding: 15rpx 30rpx;
		border-top-width: 1px;
		border-top-style: solid;
	}
	.btn {
		height: 75rpx;
		justify-content: center;
		align-items: center;
		background-color: #007AFF;
	}
	.btn-text {
		font-size: 27rpx;
		color: #F1F1F1;
	}
</style>
