<template>
	<view class="action" @touchmove="moveEnable" v-if="isShow">
		<view class="mask" ref="mask" @tap="hide"></view>
		<view class="popup" ref="popup" :style="{transform: 'translateY(' + Math.abs(lateY) + 'px)', 'background-color': skinColor.menuBgColor}">
			<view v-for="(item, index) in list" :key="index" @tap="clickItem(item.value)">
				<view class="list">
					<text class="list-text" :style="{'color': skinColor.menuTitleColor}">{{item.title}}</text>
				</view>
				<view :style="{height: '1.5rpx', 'background-color': skinColor.gapColor}" v-if="index < list.length - 1"></view>
			</view>
			<view :style="{height: '6rpx', 'background-color': skinColor.gapColor}"></view>
			<view class="list" style="height: 95rpx;" @tap="hide">
				<text class="list-text" :style="{'color': skinColor.menuTitleColor}">取消</text>
			</view>
		</view>
	</view>
</template>

<script>
	const animation = weex.requireModule('animation');
	import { skinMixin } from '@/common/mixin/index.js'
	export default {
		mixins: [skinMixin],
		props: {
			list: {
				type: Array,
				default () {
					return new Array();
				}
			}
		},
		data () {
			return {
				isShow: false,
				anima: {
					opac: 0.4,
					duration: 200
				}
			}
		},
		computed: {
			lateY () {
				return -(this.list.length * 60 + 60);
			}
		},
		created () {
			this.hide();
		},
		methods: {
			moveEnable () {
				return true;
			},
			clickItem (value) {
				this.$emit('select', value);
				this.hide();
			},
			show () {
				this.isShow = true;
				this.$nextTick(() => {
					animation.transition(this.$refs.mask, {
					    styles: {
							opacity: this.anima.opac
					    },
					    duration: this.anima.duration, //ms
					    timingFunction: 'ease',
					    needLayout:false,
					    delay: 0 //ms
					})
					animation.transition(this.$refs.popup, {
					    styles: {
							transform: 'translateY(0)'
					    },
					    duration: this.anima.duration, //ms
					    timingFunction: 'ease',
					    needLayout:false,
					    delay: 0 //ms
					})
				})
			},
			hide () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: 0
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: 'translateY(' + Math.abs(this.lateY) + 'px)'
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, (res) => {
					this.isShow = false;
					this.$emit('cancel');
				})
			}
		}
	}
</script>

<style scoped>
	.action {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.mask {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #000000;
		opacity: 0;
	}
	.popup {
		position: absolute;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.list {
		height: 90rpx;
		align-items: center;
		justify-content: center;
	}
	.list-text {
		font-size: 27rpx;
	}
</style>
