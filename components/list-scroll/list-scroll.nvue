<template>
	<view class="list-scroll">
		<list ref="list"
		:scrollable="scrollable"
		@scroll="scroll"
		:loadmoreoffset="loadmoreoffset"
		@loadmore="loadmore">
			<cell>
				<slot name="listTop"></slot>
			</cell>
			<cell
			v-for="(lists, i) in listSync"
			:key="i"
			@appear="appear(i)"
			@disappear="disappear(i)"
			:style="{height: i == listSync.length - 1 ? lastItemHeight : itemHeight}">
				<view class="list" v-if="isShows.indexOf(i) > -1">
					<view :style="{width: itemWidth + 'rpx'}" v-for="(child, index) in lists" :key="index">
						<slot :item="child"></slot>
					</view>
				</view>
			</cell>
		</list>
	</view>
</template>

<script>
	export default {
		props: {
			//列数
			columnCount: {
				type: Number,
				default: 1
			},
			//是否禁用滚动
			scrollable: {
				type: Boolean,
				default: true
			},
			//列表数据
			list: {
				type: Array,
				default () {
					return new Array();
				}
			},
			//离底部多少像素时触发加载更多事件
			loadmoreoffset: {
				type: Number,
				default: 50
			},
			//触发滚动事件的频率，没多少像素触发一次
			offsetAccuracy: {
				type: Number,
				default: 5
			},
			//外部设置一行的高度
			listHeight: {
				type: Number,
				default: 0
			},
			//外部设置的上下间隔
			gapWidth: {
				type: Number,
				default: 0
			},
			//一次最多渲染多少列
			rowCount: {
				type: Number,
				default: 4
			}
		},
		computed: {
			//多列列表数据
			listSync () {
				let arr = [];
				let j = -1;
				for ( let i in this.list ) {
					if ( i % this.maxCount == 0) {
						j++;
						this.$set(arr, j , []);
					}
					arr[j].push(this.list[i]);
				}
				return arr;
			},
			maxCount () {
				return parseInt(this.columnCount * this.rowCount);
			},
			itemWidth () {
				return 750 / this.columnCount;
			},
			itemHeight () {
				return (this.rowCount * (this.listHeight + this.gapWidth)) + 'rpx';
			},
			lastItemHeight () {
				let i = this.listSync.length - 1;
				let row = this.listSync[i].length % this.columnCount > 0 ? parseInt(this.listSync[i].length / this.columnCount) + 1 : parseInt(this.listSync[i].length / this.columnCount);
				return (row * (this.listHeight + this.gapWidth)) + 'rpx';
			}
		},
		data () {
			return {
				isShows: []
			}
		},
		methods: {
			scroll (e) {
				this.$emit('scroll', e)
			},
			loadmore (e) {
				this.$emit('loadmore', e);
			},
			appear (index) {
				let flag = this.isShows.indexOf(index);
				if ( flag == -1 ) {
					this.isShows.push(index);
				}
			},
			disappear (index) {
				let flag = this.isShows.indexOf(index);
				if ( flag > -1 ) {
					this.isShows.splice(flag, 1);
				}
			}
		}
	}
</script>

<style scoped>
	.list-scroll {
		flex: 1;
		width: 750rpx;
	}
	.list {
		flex-direction: row;
		flex-wrap: wrap;
	}
</style>
